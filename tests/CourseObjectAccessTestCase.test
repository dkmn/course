<?php

require_once(drupal_get_path('module', 'course') . '/tests/CourseTestCase.test');

/**
 * Tests for course object access.
 */
class CourseObjectAccessTestCase extends CourseTestCase {

  public static function getInfo() {
    // Note that getInfo() strings are not translated with t().
    return array(
      'name' => 'Course object access',
      'description' => 'Ensure that Course object access functions properly.',
      'group' => 'Course',
    );
  }

  /**
   * Test linear access (make sure 2nd object cannot be access until the 1st is complete).
   */
  function testCourseObjectLinearWorkflow() {
    // Create a course with 4 objects.
    $courseNode = $this->createCourseNode();
    $o1 = $this->createCourseObject($courseNode);
    $o1->setOption('weight', 1)->save();
    $o2 = $this->createCourseObject($courseNode);
    $o2->setOption('weight', 2)->save();
    $o3 = $this->createCourseObject($courseNode);
    $o3->setOption('weight', 3)->save();
    $o4 = $this->createCourseObject($courseNode);
    $o4->setOption('weight', 4)->save();

    // Use the student user.
    $user = $this->student_user;

    // Student should not be able to access the first object.
    $this->assertFalse($o1->access('take', $user), 'Check that object 1 is not accessible.');

    // (until they are enrolled)
    course_enrol($courseNode, $user);

    // User should be able to access first object, but no others.
    $this->assertTrue($o1->access('take', $user), 'Check that object 1 is accessible after enrollment.');
    $this->assertFalse($o2->access('take', $user), 'Check that object 2 is not accessible.');
    $this->assertFalse($o3->access('take', $user), 'Check that object 3 is not accessible.');
    $this->assertFalse($o4->access('take', $user), 'Check that object 4 is not accessible.');
  }

  /**
   * Test hidden course objects do not show up in the course outline.
   */
  function testHiddenCourseObjects() {
    // Create a course.
    $courseNode = $this->createCourseNode();

    // Use the student user.
    $user = $this->student_user;

    $o1 = $this->createCourseObject($courseNode);

    $this->assertTrue($o1->access('see', $user));

    $o1->setOption('hidden', 1)->save();

    $this->assertFalse($o1->access('see', $user));
  }

}
