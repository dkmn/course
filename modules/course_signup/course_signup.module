<?php

/**
 * Signup course admin form.
 */
function course_signup_admin() {
  $form = array();

  $form['signup_intro']['#value'] = "Course uses Signup's built-in functionality to allow learners to register for courses and for administrators to manage attendance.";

  $form['course_signup_bypass_checkout'] = array(
    '#title' => 'Bypass registration and checkout for free courses.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('course_signup_bypass_checkout', 1),
    '#description' => "Turning this on will allow registered users to immediately begin free courses without going through any kind of course registration or checkout when Ubercart Signup is used.",
  );

  $views = views_get_all_views();
  foreach ($views as $view) {
    foreach (array_keys($view->display) as $display_id) {
      if ($display_id != 'default' || 1) {
        $key = $view->name .':'. $display_id;
        $view_options[$key] = theme('signup_settings_view_label', $view, $display_id);
      }
    }
  }

  $form['signup_admin_list_view_course_override'] = array(
    '#title' => 'Use this view on courses instead of the view selected in signup as the admin view.',
    '#type' => 'select',
    '#options' => $view_options,
    '#default_value' => variable_get('signup_admin_list_view_course_override', 'course_signup_user_vbo_admin:default'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function course_signup_menu() {
  $items = array();

  $items['admin/settings/course/signup'] = array(
    'access arguments' => array('administer courses'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('course_signup_admin'),
    'type' => MENU_LOCAL_TASK,
    'title' => 'Signup',
  );

  $items['node/%course_node/signup-course'] = array(
    'title' => 'Quick course registration',
    'page callback' => 'course_signup_quick_register',
    'access callback' => 'course_signup_access_quick_register',
    'access arguments' => array(1),
    'page arguments' => array(1),
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Change the title of the Signups tab.
 */
function course_signup_menu_alter(&$items) {
  $items['node/%node/signups']['title callback'] = 'course_signup_tab_title';
  $items['node/%node/signups']['title arguments'] = array(1);
  $items['node/%node/signups']['weight'] = $items['node/%course_node/report']['weight'];
  // Hide normal signup add form, ours is better!
  $items['node/%node/signups/add']['access callback'] = FALSE;
}

/**
 * Callback for title.
 */
function course_signup_tab_title($node) {
  return course_node_is_course($node) ? 'Enrollments' : t('Signups');
}

/**
 * Check for quick registration.
 *
 * User should be logged in, bypass checkout should be enabled. Course can
 * not be relationships. Node must be a signup, and have no sell price or a sell
 * price set to 0.
 */
function course_signup_access_quick_register($node) {
  global $user;
  if ($user->uid > 0 && $node->signup_status && variable_get('course_signup_bypass_checkout', 1) && !($node->sell_price > 0) && $node->course['lms'] != 'relationships' && course_enrol_access($node, $user)) {
    //@todo check for attributes
    return TRUE;
  }

  return FALSE;
}

/**
 * Do a quick registration.
 *
 * @param $node Course node object.
 * @param $user User to register.
 */
function course_signup_quick_register($node, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  // Save a new signup (which enrols the user too).
  $signup = new stdClass();
  $signup->uid = $account->uid;
  $signup->nid = $node->nid;
  $signup->count_towards_limit = 1;
  $signup->signup_time = time();
  $signup->form_data = array();
  $signup->attended = 0;
  signup_save_signup($signup);
}

/**
 * Implementation of hook_signup_insert().
 *
 * Enrol a user in the course if they sign up for a course.
 */
function course_signup_signup_insert($signup) {
  course_signup_signup_enroll($signup);
}

/**
 * Implementation of hook_signup_update().
 *
 * Enrol a user in criteria passes when the sign up gets updated (status etc).
 */
function course_signup_signup_update($signup) {
  course_signup_signup_enroll($signup);
}

/**
 * Implementation of hook_signup_update().
 *
 * Enrol a user in criteria passes when the sign up gets updated (status etc).
 */
function course_signup_signup_delete($signup) {
  $node = node_load($signup->nid);
  $user = node_load($signup->uid);
  course_unenrol($node, $user);
}

/**
 * Helper signup course enroll criteria function for insert & update.
 *
 * @see course_signup_signup_insert()
 * @see course_signup_signup_update()
 */
function course_signup_signup_enroll($signup) {
  if ($signup->uid && $signup->nid && $signup->count_towards_limit && empty($signup->anon_mail)) {
    $node = node_load($signup->nid);
    if (course_node_is_course($node)) {
      $user = user_load($signup->uid);
      course_enrol($node, $user);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function course_signup_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'signup_form') {
    $node = node_load($form['nid']['#value']);
    if ($node->field_course_date) {
      if ($node->course['type'] == 'enduring' && time() > strtotime($node->field_course_date[0]['value2'])) {
      $form = array();
      $form['closed']['#value'] = t('This course closed on %date and is no longer available for enrollments.', array(
        '%date' => format_date(strtotime($node->field_course_date[0]['value2']), 'custom', 'F, jS Y'),
        ));

        if ($node->signup_status) {
          // Because we are using a different datefield for closing the signup,
          // we close the signup now. Probably need to do this on cron too.
          // The message is ugly so until that gets themed I'm not going to
          // manually disable the signup.
          //signup_close_signup($node->nid);
        }
      }
    }
  }

  if ($form_id == 'uc_product_add_to_cart_form') {
    if (course_signup_access_quick_register($form['node']['#value'])) {
      $form['#access'] = FALSE;
    }
  }

  if ($form_id == 'signup_node_admin_summary_form') {
    $node = node_load($form['nid']['#value']);
    if (course_node_is_course($node)) {
      if ($node->course['type'] == 'enduring') {
        $form['status']['#title'] = 'Course is';
        $form['status']['#options'][0] = 'expired';
        $form['status']['#options'][1] = 'active';
        foreach (element_children($form) as $k) {
          // Replace all instances of signup text with enrollment.
          $form[$k]['#title'] = t(str_replace(array('Signup', 'signup'), array('Enrollment','enrollment'), $form[$k]['#title']));
        }
      }
      if ($node->course['type'] == 'live') {
        $form['status']['#title'] = 'Registrations are';
      }
    }
  }

  if (strpos($form_id, '_node_form')) {
    if (course_node_is_course($form['#node'])) {
      if ($form['signup']) {
        $form['signup']['signup_enabled']['#disabled'] = TRUE;
        $form['signup']['signup_enabled']['#value'] = 1;
        $form['signup']['signup_enabled']['#description'] = 'Signups are always enabled for courses when course_signup is enabled.';
      }
    }
  }
}

/**
 * Implementation of hook_signup_cancel().
 *
 * Un-enrol user from course on signup cancellation.
 */
function course_signup_signup_cancel($signup, $node) {
  $user = user_load($signup->uid);
  course_unenrol($node, $user);
}

/**
 * Implementation of hook_init().
 *
 * Override signup admin VBO to use course VBO. Enrol user in course before the
 * access checks happen if the user can quick register.
 */
function course_signup_init() {
  $node = node_load(arg(1));
  global $conf;
  global $user;
  if (course_node_is_course($node)) {
    global $conf;
    // Switch courses to our view with enrollments and bulk operations.
    $conf['signup_admin_list_view'] = variable_get('signup_admin_list_view_course_override','course_signup_user_vbo_admin');
    $conf['signup_ignore_default_fields'] = 1;
    $conf['signup_fieldset_collapsed'] = 0;
    $conf['uc_signup_add_cart_text'] = 'Register';
    $conf['uc_signup_signups_closed_text'] = 'Registration is closed for this activity.';
  }

  // Check if we can quick register.
  if (course_signup_access_quick_register($node) && !course_enrolment_check($node, $user)) {
    if (arg(2) == 'takecourse') {
      course_signup_quick_register($node);
    }
  }
}

/**
 * Implementation of hook_course_show_button_alter().
 *
 * If user can quick register (free course) then always show the take course
 * button.
 */
function course_signup_course_show_button_alter(&$show, $node) {
  if (course_signup_access_quick_register($node)) {
    $show = TRUE;
  }
}

/**
 * Implementation of hook_form_FORMID_alter().
 *
 * Pre-fill user email to signup email. We'll probably kill this step in the
 * future anyway.
 */
function course_signup_form_uc_signup_attendees_form_alter(&$form, &$form_state) {
  global $user;
  if (!empty($user->mail)) {
    foreach ($form as $key => $element) {
      if ($element['#type'] == 'fieldset') {
        $form[$key][0]['#default_value'] = $user->mail;
        $form[$key][0]['#value'] = $user->mail;
        $form[$key][0]['#disabled'] = TRUE;
        $form[$key][0]['#description'] = 'Your email has been pre-filled from your account.';
      }
    }
  }
}

/**
 * Implementation of hook_action_info().
 *
 * Define the VBO action for signing a user up for a Course.
 */
function course_signup_action_info() {
  $actions = array();

  $actions['course_signup_add_enrollment_action'] = array(
    'type' => 'user',
    'description' => t('Enroll/signup user in current course'),
  );

  return $actions;
}

/**
 * Signup a user from a VBO.
 */
function course_signup_add_enrollment_action($object, $context) {
  $node = node_load(arg(1));
  $user = user_load($object->uid);
  course_signup_quick_register($node, $user);
}

/**
 * Implementation of hook_views_query_alter().
 *
 * Toggle attendance field based on course type.
 */
function course_signup_views_query_alter(&$view, &$query) {
  if ($view->name == variable_get('signup_admin_list_view_course_override', 'course_signup_user_vbo_admin')) {
    $node = node_load(arg(1));
    if ($node->course['type'] != 'live') {
      unset($view->field['attended']);
    }
  }
}

function course_signup_signup_suppress($node) {
  global $user;
  //if the user cannot enrol, suppress signup:
  if(!course_enrol_access($node, $user)){
    return FALSE;
  }
  return $node->sell_price > 0 || course_signup_access_quick_register($node);
}

/**
 * Implementation of hook_add_to_cart().
 *
 * Skip the uc_signup screens for course signups.
 */
function course_signup_add_to_cart($nid, $qty, $data) {
  global $user;
  $node = node_load($nid);
  if (course_node_is_course($node) && $node->signup) {
    // Node is a course and a signup.
    $_SESSION['uc_signup']['nids'][$nid][0] = $user->mail;
  }
}

/**
 * Implementation of hook_views_api().
 */
function course_signup_views_api() {
  return array(
    'api' => '2',
  );
}
