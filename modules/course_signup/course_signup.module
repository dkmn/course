<?php

/**
 * Signup course admin form.
 */
function course_signup_admin() {
  $form = array();

  $form['signup_intro']['#value'] = "Course uses Signup's built-in functionality to allow learners to register for courses and for administrators to manage attendance.";

  $form['course_signup_bypass_checkout'] = array(
    '#title' => 'Bypass registration and checkout for free courses.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('course_signup_bypass_checkout', 1),
    '#description' => "Turning this on will allow registered users to immediately begin free courses without going through any kind of course registration or checkout when Ubercart Signup is used.",
  );

  $views = views_get_all_views();
  foreach ($views as $view) {
    foreach (array_keys($view->display) as $display_id) {
      if ($display_id != 'default' || 1) {
        $key = $view->name . ':' . $display_id;
        $view_options[$key] = theme('signup_settings_view_label', $view, $display_id);
      }
    }
  }

  $form['signup_admin_list_view_course_override'] = array(
    '#title' => 'Use this view on courses instead of the view selected in signup as the admin view.',
    '#type' => 'select',
    '#options' => $view_options,
    '#default_value' => variable_get('signup_admin_list_view_course_override', 'course_signup_user_vbo_admin:default'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function course_signup_menu() {
  $items = array();

  $items['admin/settings/course/signup'] = array(
    'access arguments' => array('administer courses'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('course_signup_admin'),
    'type' => MENU_LOCAL_TASK,
    'title' => 'Signup',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Change the title of the Signups tab.
 */
function course_signup_menu_alter(&$items) {
  $items['node/%node/signups']['title callback'] = 'course_signup_tab_title';
  $items['node/%node/signups']['title arguments'] = array(1);
  $items['node/%node/signups']['weight'] = $items['node/%course/course-reports']['weight'];
  // Hide normal signup add form, ours is better!
  $items['node/%node/signups/add']['access callback'] = FALSE;
}

/**
 * Callback for title.
 */
function course_signup_tab_title($node) {
  return course_node_is_course($node) ? 'Enrollments' : t('Signups');
}

/**
 * Do a quick registration.
 *
 * @param stdClass $node
 *   Course node object.
 * @param stdClass $user
 *   User to register.
 */
function course_signup_quick_register($node, $account = NULL, $notify = TRUE) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  if (!$signup = db_fetch_object(db_query('select * from {signup_log} where nid = %d and uid = %d', $node->nid, $account->uid))) {
    // Save a new signup.
    if ($node->signup_status && $notify) {
      // Signup is open so we can use signup's function.
      signup_sign_up_user(array(
        'nid' => $node->nid,
        'uid' => $account->uid,
        ), $notify);
    }
    else {
      // The signup was closed. Do it silently. We can't use
      // signup_sign_up_user() because this would result in a
      // drupal_access_denied() call.
      $signup = new stdClass();
      $signup->uid = $account->uid;
      $signup->nid = $node->nid;
      $signup->signup_time = time();
      $signup->attended = 0;
      $signup->form_data = array();
      $signup->count_towards_limit = 1;
      signup_save_signup($signup);
    }
  }
  else {
    // Maybe we are "approving" an enrollment.
    $signup->count_towards_limit = 1;

    signup_save_signup($signup);
  }
}

/**
 * Implements hook_signup_insert().
 *
 * Enrol a user in the course if they sign up for a course.
 */
function course_signup_signup_insert($signup) {
  course_signup_signup_enroll($signup);
}

/**
 * Implements hook_signup_update().
 *
 * Enrol a user in criteria passes when the sign up gets updated (status etc).
 */
function course_signup_signup_update($signup) {
  course_signup_signup_enroll($signup);
}

/**
 * Implements hook_signup_delete().
 *
 * Un-enrol the user.
 */
function course_signup_signup_delete($signup) {
  $node = node_load($signup->nid);
  $user = node_load($signup->uid);
  course_unenrol($node, $user);
}

/**
 * Helper signup course enroll criteria function for insert & update.
 *
 * @see course_signup_signup_insert()
 * @see course_signup_signup_update()
 */
function course_signup_signup_enroll($signup) {
  if ($signup->uid && $signup->nid && $signup->count_towards_limit && empty($signup->anon_mail)) {
    $node = node_load($signup->nid);
    if (course_node_is_course($node)) {
      $user = user_load($signup->uid);
      course_enrol($node, $user, 'course_signup');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function course_signup_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'signup_node_admin_summary_form') {
    $node = node_load($form['nid']['#value']);
    if (course_node_is_course($node)) {
      if ($node->course['type'] == 'enduring') {
        $form['status']['#title'] = 'Course is';
        $form['status']['#options'][0] = 'expired';
        $form['status']['#options'][1] = 'active';
        foreach (element_children($form) as $k) {
          // Replace all instances of signup text with enrollment.
          $form[$k]['#title'] = t(str_replace(array('Signup', 'signup'), array('Enrollment', 'enrollment'), $form[$k]['#title']));
        }
      }
      if ($node->course['type'] == 'live') {
        $form['status']['#title'] = 'Registrations are';
      }
    }
  }

  if (strpos($form_id, '_node_form')) {
    if (course_node_is_course($form['#node'])) {
      if ($form['signup']) {
        $form['signup']['signup_enabled']['#disabled'] = TRUE;
        $form['signup']['signup_enabled']['#default_value'] = 1;
        $form['signup']['signup_enabled']['#description'] = 'Signups are always enabled for courses when course_signup is enabled.';
      }
    }
  }
}

/**
 * Implements hook_signup_cancel().
 *
 * Un-enrol user from course on signup cancellation.
 */
function course_signup_signup_cancel($signup, $node) {
  $user = user_load($signup->uid);
  course_unenrol($node, $user);
}

/**
 * Implements hook_init().
 *
 * Override signup admin VBO to use course VBO. Enrol user in course before the
 * access checks happen if the user can quick register.
 */
function course_signup_init() {
  $node = node_load(arg(1));
  global $conf;
  global $user;
  if (course_node_is_course($node)) {
    global $conf;
    // Switch courses to our view with enrollments and bulk operations.
    $conf['signup_admin_list_view'] = variable_get('signup_admin_list_view_course_override', 'course_signup_user_vbo_admin');
    $conf['signup_ignore_default_fields'] = 1;
    $conf['signup_fieldset_collapsed'] = 0;
    $conf['uc_signup_add_cart_text'] = 'Register';
    $conf['uc_signup_signups_closed_text'] = 'Registration is closed for this activity.';
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Pre-fill user email to signup email. We'll probably kill this step in the
 * future anyway.
 */
function course_signup_form_uc_signup_attendees_form_alter(&$form, &$form_state) {
  global $user;
  if (!empty($user->mail)) {
    foreach ($form as $key => $element) {
      if ($element['#type'] == 'fieldset') {
        $form[$key][0]['#default_value'] = $user->mail;
        $form[$key][0]['#value'] = $user->mail;
        $form[$key][0]['#disabled'] = TRUE;
        $form[$key][0]['#description'] = 'Your email has been pre-filled from your account.';
      }
    }
  }
}

/**
 * Implements hook_action_info().
 *
 * Define the VBO action for signing a user up for a Course.
 */
function course_signup_action_info() {
  $actions = array();

  $actions['course_signup_add_enrollment_action'] = array(
    'type' => 'user',
    'description' => t('Enroll/signup user in current course'),
  );

  return $actions;
}

/**
 * Signup a user from a VBO.
 */
function course_signup_add_enrollment_action($object, $context) {
  $node = node_load(arg(1));
  $user = user_load($object->uid);
  course_signup_quick_register($node, $user);
}

/**
 * Implements hook_views_query_alter().
 *
 * Toggle attendance field based on course type.
 */
function course_signup_views_query_alter(&$view, &$query) {
  if ($view->name == variable_get('signup_admin_list_view_course_override', 'course_signup_user_vbo_admin')) {
    $node = node_load(arg(1));
    if ($node->course['type'] != 'live') {
      unset($view->field['attended']);
    }
  }
}

/**
 * Implements hook_add_to_cart().
 *
 * Skip the uc_signup screens for course signups.
 */
function course_signup_add_to_cart($nid, $qty, $data) {
  global $user;
  $node = node_load($nid);
  if (course_node_is_course($node) && $node->signup) {
    // Node is a course and a signup.
    $_SESSION['uc_signup']['nids'][$nid][0] = $user->mail;
  }
}

/**
 * Implements hook_course_enrol().
 *
 * If a user is enrolled outside of signup, sign them up as well.
 */
function course_signup_course_enrol($node, $user, $from, $code, $status) {
  if ($from != 'course_signup' && $status) {
    course_signup_quick_register($node, $user);
  }
}

/**
 * Implements hook_course_can_enrol().
 */
function course_signup_course_can_enrol($node, $user) {
  // We depend on Signup Restrict by Role for enrollment access per role.
  if (module_exists('signup_restrict_by_role')) {
    $check = signup_restrict_by_role_access_signup($node, $user);
    $check['message'] = str_replace('signup', 'course enrollment', $check['message']);
    $hooks[] = $check;
  }

  if ($node->signup) {
    // This node is signup-enabled.
    if (!db_result(db_query('select 1 from {signup_log} where nid = %d and uid = %d', $node->nid, $user->uid))) {
      if ($signups[$node->nid]) {
        // Block enrollments until the user is signed up.
        $hooks[] = array(
          'success' => FALSE,
          'message' => 'You must be signed up for this course to enroll.',
        );
      }
    }

    return $hooks;
  }
}

/**
 * Implements hook_views_api().
 */
function course_signup_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_course_handlers().
 */
function course_signup_course_handlers() {
  return array(
    'object' => array(
      'signup_attendance' => array(
        'name' => t('Attendance'),
        'class' => 'CourseObjectSignup',
        'description' => t('An attendance course object.'),
      ),
    ),
  );
}

/**
 * Track attendance.
 *
 * @todo, find a better way? looking at you, @see signup_mark_attended_action
 */
function course_signup_watchdog($watchdog) {
  if (strpos($watchdog['message'], 'Marked signup') !== FALSE) {
    $sid = reset($watchdog['variables']);
    $signup = signup_load_signup($sid);
    $account = user_load($signup->uid);
    $complete = strpos($watchdog['message'], 'did not') === FALSE;
    if ($courseObject = course_get_course_object('course_signup', 'signup_attendance', $signup->nid, $account)) {
      $courseObject->getFulfillment()->setComplete($complete)->save();
    }
  }
}
