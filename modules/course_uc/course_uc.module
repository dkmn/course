<?php

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param $owner
 * @param $plugin_type
 * @return string
 */
function course_uc_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_form_alter().
 *
 * @todo We shouldn't be doing any specific logic in here, probably need
 * something like hook_course_can_enrol.
 */
function course_uc_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'uc_product_add_to_cart') !== FALSE) {
    global $user;
    $node = node_load($form['nid']['#value']);

    $result = course_take_course_access($node);
    if (course_node_is_course($node) && $result['success'] && !$node->field_addtl_products[0]['nid']) {
      $form['submit']['#access'] = FALSE;
    }

    if (!$user->uid) {
      $form['submit']['#access'] = FALSE;
      if ($node->sell_price > 0) {
        $message = "You must !login or !register to purchase this course.";
      }
      else {
        $message = "You must !login or !register to take this course.";
      }

      $options = array(
        'query' => array(
          drupal_get_destination(),
        ),
      );
      $message = t($message, array(
                                  '!login' => l('login', 'user/login', $options),
                                  '!register' => l('register', 'user/register', $options)
                             ));

      $form['course_uc']['#value'] = $message;
    }

    $result = course_enrol_access($node, $user);
    if (!$result['success']) {
      $form['submit']['#access'] = FALSE;
      $form['course_uc']['#value'] = '<h2>' . $result['header'] . '</h2>' . $result['message'];
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param string $view_mode
 */
function course_uc_node_view($node, $view_mode = 'full') {
  if (course_node_is_course($node) && !($node->sell_price > 0)) {
    $hides = array(
      'sell_price',
      'display_price',
      'model',
      'list_price',
      'cost',
      'weight',
      'dimensions',
    );
    foreach ($hides as $hide) {
      unset($node->content[$hide]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return void
 */
function course_uc_form_course_admin_settings_alter(&$form, &$form_state, $form_id = "course_admin_settings") {
  $form['course_uc_restrict_qty'] = array(
    '#title' => 'Restrict course products to 1 per customer.',
    '#description' => 'Course will restrict users from adding the product to cart if they have already purchased the course or already have the course in their cart.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('course_uc_restrict_qty', 1),
  );
}

/**
 * Implements hook_init().
 */
function course_uc_init() {
  if (arg(1) == 'checkout') {
    global $conf;
    // Turn off content profile on registration for ubercart account creations.
    $conf['content_profile_profile']['registration_use'] = 0;
  }
}

/**
 * Implements hook_course_enrol().
 *
 * Satisfy payment requirement when manually enrolled.
 *
 * @param $node
 * @param $user
 */
function course_uc_course_enrol($node, $user) {
  $reqs = course_outline_get_course_requirements($node);
  if (is_array($reqs) && count($reqs)) {
    foreach ($reqs as $req) {
      if ($req['requirement_type'] == 'ubercart_payment') {
        $ubercart = course_outline_get_fulfillment($req['snid'], $user->uid);
        if (!$ubercart['complete']) {
          $ubercart['snid'] = $req['snid'];
          $ubercart['uid'] = $user->uid;
          $ubercart['complete'] = 1;
          $ubercart['date_completed'] = REQUEST_TIME;
          $ubercart['info'] = 'Completed payment requirement because user was enrolled.';
          course_outline_save_fulfillment($ubercart);
        }
      }
    }
  }
}

/**
 * Implements UC hook_add_to_cart().
 *
 * @param $nid
 * @param $qty
 * @param $data
 * @return array
 */
function course_uc_restrict_qty_add_to_cart($nid, $qty, $data) {
  if (variable_get('course_uc_restrict_qty', 1)) {
    global $user;
    $node = node_load($nid);
    if (course_node_is_course($node)) {
      if (course_uc_restrict_qty_check_purchased($user->uid, $nid)) {
        return array(
          array(
            'success' => FALSE,
            'message' => "You've already purchased this course.",
            'silent' => FALSE,
          ),
        );
      }
      if (course_uc_restrict_qty_check_cart($user->uid, $nid)) {
        return array(
          array(
            'success' => FALSE,
            'message' => t("This course is already in your !cart.",
              array('!cart' => l('shopping cart', 'cart'))),
            'silent' => FALSE,
          ),
        );
      }
    }
  }
}

/**
 * Check if a user purchased a node previously.
 * @param $uid
 * @param $nid
 * @return void
 */
function course_uc_restrict_qty_check_purchased($uid, $nid) {
  $sql = "select 1 from {uc_orders} uco
  left join {uc_order_products} ucop on uco.order_id = ucop.order_id
  where uid = %d and nid = %d";
  $purchased = db_query($sql, $uid, $nid)->fetchField();
  return $purchased;
}

/**
 * Check if a node is in a user's cart.
 *
 * @param $uid
 * @param $nid
 * @return bool
 */
function course_uc_restrict_qty_check_cart($uid, $nid) {
  // @todo In what circumstance would $cid ever be set here?
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  $contents = uc_cart_get_contents($cid);
  foreach ($contents as $item) {
    if ($item->nid == $nid) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_uc_cart_alter().
 *
 * @param $cart_items
 */
function course_uc_restrict_qty_uc_cart_alter(&$cart_items) {
  if (variable_get('course_uc_restrict_qty', 1)) {
    global $user;
    foreach ($cart_items as $key => $cart_item) {
      $node = node_load($cart_item->nid);
      if (course_node_is_course($node) && $cart_item->qty > 1) {
        $cart_items[$key]->qty = 1;
        $sql = "update {uc_cart_products} set qty = 1 where cart_id = %d and nid = %d";
        db_query($sql, $user->uid, $node->nid);
        // @todo This conditional doesn't make sense. Where would $message have been set?
        if (!$message) {
          drupal_set_message('Sorry, you may not purchase multiple identical courses.', 'error');
          $message = true;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 */
function course_uc_restrict_qty_form_uc_cart_view_form_alter(&$form, &$form_state) {
  if (variable_get('course_uc_restrict_qty', 1)) {
    foreach ($form['items'] as $key => &$item) {
      if (is_numeric($key)) {
        $node = node_load($item['nid']['#value']);
        if (course_node_is_course($node)) {
          //$item['qty']['#disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_ca_action().
 *
 * Add action to enrol a user in a course.
 *
 * @return array
 */
function course_uc_ca_action() {
  $arg = array(
    '#entity' => 'uc_order',
    '#title' => t('Order'),
  );

  $actions['course_uc_enrol_user_in_ordered_courses'] = array(
    '#title' => t('Enroll user in course(s)'),
    '#category' => t('Order'),
    '#callback' => 'course_uc_enrol_user_in_ordered_courses',
    '#arguments' => array(
      'order' => $arg,
    ),
  );

  return $actions;
}

/**
 * Loops through items in an Ubercart order and enrols the user in courses purchased.
 *
 * @param $order
 */
function course_uc_enrol_user_in_ordered_courses($order) {
  foreach ($order->products as $product) {
    $node = node_load($product->nid);
    // TODO Convert "user_load" to "user_load_multiple" if "$order->uid" is other than a uid.
    // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
    // Example: array_shift(user_load_multiple(array(), $order->uid))
    $user = user_load($order->uid);
    if (course_node_is_course($node)) {
      course_enrol($node, $user, 'ubercart');
    }
  }
}

/**
 * Implements hook_ca_predicate().
 *
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 *
 * @return array
 */
function course_uc_ca_predicate() {
  $configurations['course_uc_enrol_user_in_ordered_courses'] = array(
    '#title' => t('Enroll user in ordered courses'),
    '#class' => 'course',
    '#trigger' => 'uc_order_status_update',
    '#status' => 1,
    '#conditions' => array(
      '#operator' => 'OR',
      '#conditions' => array(
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => t('If order is marked as completed'),
          '#argument_map' => array(
            'order' => 'updated_order',
          ),
          '#settings' => array(
            'order_status' => 'completed',
          ),
        ),
      ),
    ),
    '#actions' => array(
      array(
        '#name' => 'course_uc_enrol_user_in_ordered_courses',
        '#title' => t('Enroll user in ordered courses'),
        '#argument_map' => array(
          'order' => 'order',
        ),
        '#settings' => array(),
      ),
    ),
  );

  return $configurations;
}
