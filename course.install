<?php
/**
 * @file
 * Install, update and uninstall functions for the course module.
 *
 */


/**
 * Implements hook_install().
 */
function course_install() {
  module_load_include('inc', 'node', 'content_types');

  // Create the default course type.
  $course_type = array(
    'type' => 'course',
    'name' => st('Course'),
    'base' => 'node_content',
    'description' => st('Create an e-learning course, containing any number of graded or ungraded course objects.'),
    'custom' => TRUE,
    'modified' => TRUE,
    'locked' => FALSE,
  );
  $course_type = node_type_set_defaults($course_type);
  node_type_save($course_type);
  node_add_body_field($course_type);

  // @todo remove these. Make sure useages of these variables use the default
  // value of variable_get() properly.
  variable_set('course_use_course', 1);
  variable_set('default_lms_course', 'drupal');
}

/**
 * Implements hook_schema().
 */
function course_schema() {
  $schema = array();

  $schema['course_report'] = array(
    'description' => "Stores users' course reports.",
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Course report record ID.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Drupal course node.',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Drupal user ID.',
      ),
      'date_completed' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'default' => NULL,
        'description' => 'Date completed.',
      ),
      'updated' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'default' => NULL,
        'description' => 'Date this record was updated.',
      ),
      'grade_result' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Course grade received.',
      ),
      'section' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "Key of current section.",
      ),
      'section_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "Name of current section.",
      ),
      'complete' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'length' => 1,
        'description' => 'Flag to mark this course as complete.',
      ),
      'data' => array(
        'type' => 'text',
        'description' => "Serialized snapshot data.",
        'size' => 'medium',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('uk' => array('nid', 'uid')),
  );

  $schema['course_enrolment'] = array(
    'description' => 'Stores enrolment records for LMS access',
    'fields' => array(
      'eid' => array(
        'description' => 'Primary Key: The eid of the enrolment.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The nid of the course node',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The uid of the user',
      ),
      'enrollmenttype' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
        'default' => '',
        'description' => 'The type of enrollment, if applicable',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The enrolment status',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time of enrollment',
      ),
      'enrol_end' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Date enrolment ends.',
      ),
      'code' => array(
        'type' => 'varchar',
        'length' => 128,
        'default' => NULL,
        'description' => 'The access code used to enroll.',
      ),
      'user_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The user type while in the context of this enrollment.',
      ),
    ),
    'primary key' => array('eid'),
    'unique keys' => array('nid_uid' => array('nid', 'uid')),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
  );

  $schema['course_node'] = array(
    'description' => 'Stores node to LMS type relation.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Course node ID.',
      ),
      'lms' => array(
        'type' => 'varchar',
        'length' => '127',
        'not null' => TRUE,
        'description' => 'Keyed LMS type.',
      ),
      'cid' => array(
        'type' => 'varchar',
        'length' => 128,
        'default' => NULL,
        'description' => 'An optional external LMS course ID.',
      ),
      'attendance' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Whether or not the course requires attendance.',
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
        'description' => 'Live or enduring course.',
      ),
      'credits' => array(
        'type' => 'float',
        'description' => 'Course credit.',
        'precision' => 6,
        'scale' => 2,
      ),
      // @see http://drupal.org/node/159605#comment-4321368
      'open' => array(
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
        'description' => 'Date course opens.',
      ),
      'close' => array(
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
        'description' => 'Date course closes.',
      ),
      'duration' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Amount of time a user has to access this course.',
      ),
      'transcript' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => "Whether or not to show this course on the user's transcript",
      ),
      'catalog' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => "Whether or not to show this course on the course catalog",
      ),
      'certificate' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => "Whether or not the user can receive a certificate for this course.",
      ),
      'outline_custom_titles' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Whether or not the outline will show custom titles for this course's items.",
      ),
      'external_id' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'External ID of the course.',
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['course_outline'] = array(
    'description' => "Stores users' course reports",
    'fields' => array(
      'snid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Unique identifier for the course requirement record.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'nid.',
      ),
      'requirement_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The implementing module name (course_quiz etc)",
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The item title",
      ),
      'requirement_component' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The course object key as defined by hook_course_object_info()",
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'is this item enabled?',
      ),
      'info' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The item info",
      ),
      'instance' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'The item instance',
      ),
      'graded' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'is this item graded?',
      ),
      'passing_grade' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'passing_grade (out of 100 precent).',
      ),
      'required' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'is this item required?',
      ),
      'payment_required' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'is this item payment_required?',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => FALSE,
        'default' => 0,
        'description' => 'Order in course workflow.',
      ),
      'hidden' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Can user edit requirement?',
      ),
    ),
    'primary key' => array('snid'),
  );

  $schema['course_outline_fulfillment'] = array(
    'description' => "Stores users' course reports",
    'fields' => array(
      'sfid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Unique identifier for the course requirement fufillment record.',
      ),
      'snid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'identifier for the course requirement.',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'uid of {user}.',
      ),
      'complete' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Is this item complete?',
      ),
      'grade_result' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'grade_result',
      ),
      'date_completed' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'default' => NULL,
        'description' => 'Date requirement was completed.',
      ),
      'info' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "Description of fulfillment event",
      ),
    ),
    'primary key' => array('sfid'),
  );

  return $schema;
}

/**
 * Cleanup enrolments for deleted users.
 */
function course_update_6121() {
  // Delete enrollments for users who don't exist anymore.
  // @todo remove this update, because hook_user_delete() should auto-clean.
  $count = db_delete('course_enrolment', 'ce')
    ->join('users', 'u', 'ce.uid = u.uid')
    ->condition('u.uid', NULL)
    ->execute();

  return t('%count old enrollments deleted.', array('%count' => $count));

  throw new DrupalUpdateException('Automatic cleanup failed; you may need to manually remove old users from the course_enrolment table.');
}
